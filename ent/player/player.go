// Code generated by entc, DO NOT EDIT.

package player

const (
	// Label holds the string label denoting the player type in the database.
	Label = "player"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"

	// EdgeGame holds the string denoting the game edge name in mutations.
	EdgeGame = "game"

	// Table holds the table name of the player in the database.
	Table = "players"
	// GameTable is the table the holds the game relation/edge.
	GameTable = "players"
	// GameInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GameInverseTable = "games"
	// GameColumn is the table column denoting the game relation/edge.
	GameColumn = "game_players"
)

// Columns holds all SQL columns for player fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Player type.
var ForeignKeys = []string{
	"game_players",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(int) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
